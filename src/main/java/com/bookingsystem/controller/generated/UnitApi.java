/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bookingsystem.controller.generated;

import java.math.BigDecimal;
import com.bookingsystem.model.generated.BookingRequest;
import com.bookingsystem.model.generated.BookingResponse;
import com.bookingsystem.model.generated.CancelBookingRequest;
import com.bookingsystem.model.generated.CancelBookingResponse;
import org.springframework.format.annotation.DateTimeFormat;
import com.bookingsystem.model.generated.Error;
import com.bookingsystem.model.generated.GetUnitsResponse;
import java.time.LocalDate;
import com.bookingsystem.model.generated.PaymentRequest;
import com.bookingsystem.model.generated.PaymentResponse;
import com.bookingsystem.model.generated.Unit;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-28T03:32:03.521616+02:00[Europe/Kiev]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "Booking", description = "the Booking API")
public interface UnitApi {

    /**
     * POST /unit/{unitId}/book : Book a Unit for a specific date range
     *
     * @param unitId ID of the Unit to book (required)
     * @param bookingRequest  (required)
     * @return Booking successful response (status code 200)
     *         or Bad Request (status code 400)
     *         or Resource not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "bookUnit",
        summary = "Book a Unit for a specific date range",
        tags = { "Booking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Booking successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BookingResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/unit/{unitId}/book",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<BookingResponse> bookUnit(
        @Parameter(name = "unitId", description = "ID of the Unit to book", required = true, in = ParameterIn.PATH) @PathVariable("unitId") String unitId,
        @Parameter(name = "BookingRequest", description = "", required = true) @Valid @RequestBody BookingRequest bookingRequest
    );


    /**
     * POST /unit/{unitId}/cancel : Cancel a booking for a Unit
     *
     * @param unitId ID of the Unit whose booking is to be cancelled (required)
     * @param cancelBookingRequest  (required)
     * @return Cancellation successful response (status code 200)
     *         or Bad Request (status code 400)
     *         or Resource not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "cancelBooking",
        summary = "Cancel a booking for a Unit",
        tags = { "Booking" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Cancellation successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CancelBookingResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/unit/{unitId}/cancel",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<CancelBookingResponse> cancelBooking(
        @Parameter(name = "unitId", description = "ID of the Unit whose booking is to be cancelled", required = true, in = ParameterIn.PATH) @PathVariable("unitId") String unitId,
        @Parameter(name = "CancelBookingRequest", description = "", required = true) @Valid @RequestBody CancelBookingRequest cancelBookingRequest
    );


    /**
     * POST /unit : Create a new Unit
     *
     * @param unit  (required)
     * @return Unit created successfully (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "createUnit",
        summary = "Create a new Unit",
        tags = { "Units" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Unit created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Unit.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/unit",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Unit> createUnit(
        @Parameter(name = "Unit", description = "", required = true) @Valid @RequestBody Unit unit
    );


    /**
     * POST /unit/{unitId}/pay : Emulate payment for a booking
     *
     * @param unitId ID of the Unit for which payment is made (required)
     * @param paymentRequest  (required)
     * @return Payment processed successfully (status code 200)
     *         or Bad Request (status code 400)
     *         or Resource not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "emulatePayment",
        summary = "Emulate payment for a booking",
        tags = { "Payment" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Payment processed successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/unit/{unitId}/pay",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<PaymentResponse> emulatePayment(
        @Parameter(name = "unitId", description = "ID of the Unit for which payment is made", required = true, in = ParameterIn.PATH) @PathVariable("unitId") String unitId,
        @Parameter(name = "PaymentRequest", description = "", required = true) @Valid @RequestBody PaymentRequest paymentRequest
    );


    /**
     * GET /unit : Retrieve list of Units with optional filters and pagination
     *
     * @param startDate Booking start date filter (YYYY-MM-DD) (optional)
     * @param endDate Booking end date filter (YYYY-MM-DD) (optional)
     * @param minCost Minimum cost filter (optional)
     * @param maxCost Maximum cost filter (optional)
     * @param accommodationType  (optional)
     * @param page Page number for pagination (optional, default to 0)
     * @param size Number of items per page (optional, default to 10)
     * @return A paginated list of Units (status code 200)
     *         or Bad Request (status code 400)
     *         or Resource not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getUnits",
        summary = "Retrieve list of Units with optional filters and pagination",
        tags = { "Units" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A paginated list of Units", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetUnitsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/unit",
        produces = { "application/json" }
    )
    
    ResponseEntity<GetUnitsResponse> getUnits(
        @Parameter(name = "startDate", description = "Booking start date filter (YYYY-MM-DD)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
        @Parameter(name = "endDate", description = "Booking end date filter (YYYY-MM-DD)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate,
        @Parameter(name = "minCost", description = "Minimum cost filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "minCost", required = false) BigDecimal minCost,
        @Parameter(name = "maxCost", description = "Maximum cost filter", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxCost", required = false) BigDecimal maxCost,
        @Parameter(name = "accommodationType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "accommodationType", required = false) String accommodationType,
        @Parameter(name = "page", description = "Page number for pagination", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size
    );

}
