openapi: 3.0.3
info:
  title: Booking System API
  description: API for managing Units, Bookings, and Payments in a booking system.
  version: 1.0.0

servers:
  - url: http://localhost:8080/api
    description: Local server

paths:
  /unit:
    post:
      tags:
        - Units
      summary: Create a new Unit
      operationId: createUnit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
      responses:
        '200':
          description: Unit created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitListResponse'
        "400":
          $ref: '#/components/responses/BadRequest'

    get:
      tags:
        - Units
      summary: Retrieve list of Units with optional filters and pagination
      operationId: getUnits
      parameters:
        - name: startDate
          in: query
          description: Booking start date filter (YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: Booking end date filter (YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
        - name: minCost
          in: query
          description: Minimum cost filter
          required: false
          schema:
            type: number
            format: decimal
        - name: maxCost
          in: query
          description: Maximum cost filter
          required: false
          schema:
            type: number
            format: decimal
        - name: accommodationType
          in: query
          required: false
          schema:
            type: string
            enum: [ HOME, FLAT, APARTMENTS ]
          example: FLAT
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: A paginated list of Units
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /unit/{unitId}/book:
    post:
      tags:
        - Booking
      summary: Book a Unit for a specific date range
      operationId: bookUnit
      parameters:
        - name: unitId
          in: path
          description: ID of the Unit to book
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingRequest'
      responses:
        '200':
          description: Booking successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /unit/{unitId}/cancel:
    post:
      tags:
        - Booking
      summary: Cancel a booking for a Unit
      operationId: cancelBooking
      parameters:
        - name: unitId
          in: path
          description: ID of the Unit whose booking is to be cancelled
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: 1001
      responses:
        '200':
          description: Cancellation successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /unit/{unitId}/pay:
    post:
      tags:
        - Payment
      summary: Emulate payment for a booking
      operationId: emulatePayment
      parameters:
        - name: unitId
          in: path
          description: ID of the Unit for which payment is made
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
      responses:
        '200':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /stats/available-units:
    get:
      tags:
        - Statistics
      summary: Get the count of available Units for booking
      operationId: getAvailableUnitsCount
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Returns the count of available Units
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    BookingRequest:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          example: 1001
        bookingStartDate:
          type: string
          format: date
          example: '2025-03-01'
        bookingEndDate:
          type: string
          format: date
          example: '2025-03-15'
    PaymentRequest:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          description: ID of the user making the payment
          example: 1001
    UnitListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Unit'
        totalElements:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 10
        size:
          type: integer
          example: 10
        status:
          type: integer
        message:
          type: string
          example: Unit successfully saved
    MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: Payment successful
        status:
          type: integer

    Unit:
      type: object
      properties:
        id:
          type: integer
          example: 1
        numberOfRooms:
          type: integer
          example: 3
        accommodationType:
          type: string
          enum: [HOME, FLAT, APARTMENTS]
          example: FLAT
        floor:
          type: integer
          example: 2
        cost:
          type: number
          format: decimal
          example: 120.00
        description:
          type: string
          example: Spacious apartment with sea view
        available:
          type: boolean
          example: true
    Error:
      type: object
      properties:
        title:
          type: string
          example: "Bad Request"
        status:
          type: integer
          example: 400
        detail:
          type: string
          example: "The request parameters are invalid."
        instance:
          type: string
          example: "/units"
