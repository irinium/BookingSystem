import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.gradle.api.tasks.testing.TestResult

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        events TestLogEvent.FAILED,
            TestLogEvent.PASSED,
            TestLogEvent.SKIPPED
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        debug {
            events TestLogEvent.STARTED,
                TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_ERROR,
                TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        // define file to store test summary and populate in subsequent methods
        File file = new File("${buildDir}/reports/tests/test-summary.md")

        beforeSuite { desc ->
            if (!desc.parent) { // will match the outermost suite
                file.write('\n<details>\n' + '<summary>Test Report Details</summary>\n')
                file.append('<table><tr><th>Test Suite</th><th>Test Case</th><th>Test Result</th></tr>')
            }
        }

        afterTest { desc, result ->
            file.append("<tr><td>" + desc.className.split("\\.").last() + "</td><td>${desc.displayName}</td><td>" + retrieveResultMarkdownSymbol(result.resultType) + "</td></tr>\n")
        }

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))

                file.append("</table>\n</details>")
                /*

                */
                def title = '## Test Summary'
                /*

                */
                def tableHeader = '<table><tr><th>Test Result</th><th>Passed  :green_circle:</th><th>Failed  :x:</th><th>Skipped  :warning:</th></tr>' + '\n'
                def results = "<tr><td>${result.resultType}  " + retrieveResultMarkdownSymbol(result.resultType) + "</td><td>${result.successfulTestCount}</td><td>${result.failedTestCount}</td><td>${result.skippedTestCount}</td></tr></table>"
                file.append '\n\n' + title + '\n' + tableHeader + '\n' + results
            }
        }
    }
}

def static retrieveResultMarkdownSymbol(TestResult.ResultType resultType) {
    switch (resultType) {
        case TestResult.ResultType.FAILURE:
            return ":x:"
            break
        case TestResult.ResultType.SUCCESS:
            return ":green_circle:"
            break
        case TestResult.ResultType.SKIPPED:
            return ":warning:"
            break
        default:
            return "UNKNOWN"
    }
}
